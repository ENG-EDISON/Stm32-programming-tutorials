
BARE_METAL_RX_TX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000002c4  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000488  08000488  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000488  08000488  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000488  08000488  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000488  08000488  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000488  08000488  00010488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800048c  0800048c  0001048c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000490  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000494  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000494  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001e05  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000005dd  00000000  00000000  00021e39  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001e0  00000000  00000000  00022418  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000198  00000000  00000000  000225f8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00019bbc  00000000  00000000  00022790  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001d50  00000000  00000000  0003c34c  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c467e  00000000  00000000  0003e09c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0010271a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005c4  00000000  00000000  00102798  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000470 	.word	0x08000470

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000470 	.word	0x08000470

08000204 <main>:



//main function
int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	b082      	sub	sp, #8
 8000208:	af00      	add	r7, sp, #0

	USART_Init();
 800020a:	f000 f80b 	bl	8000224 <USART_Init>
	char c;
	while(1)

	{
		c = UART_RX();//Function call to receive the character and store it in c
 800020e:	f000 f85f 	bl	80002d0 <UART_RX>
 8000212:	4603      	mov	r3, r0
 8000214:	71fb      	strb	r3, [r7, #7]
		UART_TX(c);//Transmit the data via UART to be visualized
 8000216:	79fb      	ldrb	r3, [r7, #7]
 8000218:	4618      	mov	r0, r3
 800021a:	f000 f83d 	bl	8000298 <UART_TX>
		delay();//delay
 800021e:	f000 f86b 	bl	80002f8 <delay>
		c = UART_RX();//Function call to receive the character and store it in c
 8000222:	e7f4      	b.n	800020e <main+0xa>

08000224 <USART_Init>:
	}
}


void USART_Init(void)
{
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=1;//Enable clock source to PORT A
 8000228:	4b18      	ldr	r3, [pc, #96]	; (800028c <USART_Init+0x68>)
 800022a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800022c:	4a17      	ldr	r2, [pc, #92]	; (800028c <USART_Init+0x68>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6313      	str	r3, [r2, #48]	; 0x30
	RCC->APB1ENR |=0x20000;//Envle clock to USART2
 8000234:	4b15      	ldr	r3, [pc, #84]	; (800028c <USART_Init+0x68>)
 8000236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000238:	4a14      	ldr	r2, [pc, #80]	; (800028c <USART_Init+0x68>)
 800023a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800023e:	6413      	str	r3, [r2, #64]	; 0x40
	GPIOA->AFR[0] |=0x7700;//Enable Alternate function for USART2 communication
 8000240:	4b13      	ldr	r3, [pc, #76]	; (8000290 <USART_Init+0x6c>)
 8000242:	6a1b      	ldr	r3, [r3, #32]
 8000244:	4a12      	ldr	r2, [pc, #72]	; (8000290 <USART_Init+0x6c>)
 8000246:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 800024a:	6213      	str	r3, [r2, #32]
	GPIOA->MODER |=0xA0;//Enable alternate function in PA3(RX) and PA2(TX)
 800024c:	4b10      	ldr	r3, [pc, #64]	; (8000290 <USART_Init+0x6c>)
 800024e:	681b      	ldr	r3, [r3, #0]
 8000250:	4a0f      	ldr	r2, [pc, #60]	; (8000290 <USART_Init+0x6c>)
 8000252:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000256:	6013      	str	r3, [r2, #0]

	USART2->BRR |=0x683;//Set baudrate at 1600b/s at 16MHz Frequency
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <USART_Init+0x70>)
 800025a:	689b      	ldr	r3, [r3, #8]
 800025c:	4a0d      	ldr	r2, [pc, #52]	; (8000294 <USART_Init+0x70>)
 800025e:	f443 63d0 	orr.w	r3, r3, #1664	; 0x680
 8000262:	f043 0303 	orr.w	r3, r3, #3
 8000266:	6093      	str	r3, [r2, #8]
	USART2->CR1 |= 0xC;//Enable Transmission and Receiving enable for UART communication by setting TE and RE registers
 8000268:	4b0a      	ldr	r3, [pc, #40]	; (8000294 <USART_Init+0x70>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	4a09      	ldr	r2, [pc, #36]	; (8000294 <USART_Init+0x70>)
 800026e:	f043 030c 	orr.w	r3, r3, #12
 8000272:	60d3      	str	r3, [r2, #12]
	USART2->CR1 |=0x2000;//Enable USART communation
 8000274:	4b07      	ldr	r3, [pc, #28]	; (8000294 <USART_Init+0x70>)
 8000276:	68db      	ldr	r3, [r3, #12]
 8000278:	4a06      	ldr	r2, [pc, #24]	; (8000294 <USART_Init+0x70>)
 800027a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800027e:	60d3      	str	r3, [r2, #12]

}
 8000280:	bf00      	nop
 8000282:	46bd      	mov	sp, r7
 8000284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000288:	4770      	bx	lr
 800028a:	bf00      	nop
 800028c:	40023800 	.word	0x40023800
 8000290:	40020000 	.word	0x40020000
 8000294:	40004400 	.word	0x40004400

08000298 <UART_TX>:


int UART_TX(int ch)
{
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
	while(!(USART2->SR & 0x80));//wait untill a flag is set to indicate a charater is ready to transmit
 80002a0:	bf00      	nop
 80002a2:	4b0a      	ldr	r3, [pc, #40]	; (80002cc <UART_TX+0x34>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d0f9      	beq.n	80002a2 <UART_TX+0xa>
	USART2->DR |=(ch &0xFF);//when a character is received,put it in the data register(DR)
 80002ae:	4b07      	ldr	r3, [pc, #28]	; (80002cc <UART_TX+0x34>)
 80002b0:	685a      	ldr	r2, [r3, #4]
 80002b2:	687b      	ldr	r3, [r7, #4]
 80002b4:	b2db      	uxtb	r3, r3
 80002b6:	4905      	ldr	r1, [pc, #20]	; (80002cc <UART_TX+0x34>)
 80002b8:	4313      	orrs	r3, r2
 80002ba:	604b      	str	r3, [r1, #4]
	return ch;//return the charater present at Data register
 80002bc:	687b      	ldr	r3, [r7, #4]
}
 80002be:	4618      	mov	r0, r3
 80002c0:	370c      	adds	r7, #12
 80002c2:	46bd      	mov	sp, r7
 80002c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c8:	4770      	bx	lr
 80002ca:	bf00      	nop
 80002cc:	40004400 	.word	0x40004400

080002d0 <UART_RX>:


char UART_RX()
{
 80002d0:	b480      	push	{r7}
 80002d2:	af00      	add	r7, sp, #0
	while(!(USART2->SR & 0x20)){}//Wait untill a charster is received
 80002d4:	bf00      	nop
 80002d6:	4b07      	ldr	r3, [pc, #28]	; (80002f4 <UART_RX+0x24>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	f003 0320 	and.w	r3, r3, #32
 80002de:	2b00      	cmp	r3, #0
 80002e0:	d0f9      	beq.n	80002d6 <UART_RX+0x6>

	return(USART2->DR);//Return the character recived at the Data Register(DR)
 80002e2:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <UART_RX+0x24>)
 80002e4:	685b      	ldr	r3, [r3, #4]
 80002e6:	b2db      	uxtb	r3, r3
}
 80002e8:	4618      	mov	r0, r3
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	40004400 	.word	0x40004400

080002f8 <delay>:


void delay()
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0

	for(int n=0;n<=90000;n++){}//waste time to create delay for approx. 1sec
 80002fe:	2300      	movs	r3, #0
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	e002      	b.n	800030a <delay+0x12>
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	3301      	adds	r3, #1
 8000308:	607b      	str	r3, [r7, #4]
 800030a:	687b      	ldr	r3, [r7, #4]
 800030c:	4a04      	ldr	r2, [pc, #16]	; (8000320 <delay+0x28>)
 800030e:	4293      	cmp	r3, r2
 8000310:	ddf8      	ble.n	8000304 <delay+0xc>
}
 8000312:	bf00      	nop
 8000314:	370c      	adds	r7, #12
 8000316:	46bd      	mov	sp, r7
 8000318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	00015f90 	.word	0x00015f90

08000324 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000328:	bf00      	nop
 800032a:	46bd      	mov	sp, r7
 800032c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000330:	4770      	bx	lr

08000332 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000332:	b480      	push	{r7}
 8000334:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000336:	e7fe      	b.n	8000336 <HardFault_Handler+0x4>

08000338 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000338:	b480      	push	{r7}
 800033a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800033c:	e7fe      	b.n	800033c <MemManage_Handler+0x4>

0800033e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800033e:	b480      	push	{r7}
 8000340:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000342:	e7fe      	b.n	8000342 <BusFault_Handler+0x4>

08000344 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000348:	e7fe      	b.n	8000348 <UsageFault_Handler+0x4>

0800034a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800034a:	b480      	push	{r7}
 800034c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800034e:	bf00      	nop
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800035c:	bf00      	nop
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr

08000366 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000378:	f000 f842 	bl	8000400 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800037c:	bf00      	nop
 800037e:	bd80      	pop	{r7, pc}

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000384:	4b08      	ldr	r3, [pc, #32]	; (80003a8 <SystemInit+0x28>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800038a:	4a07      	ldr	r2, [pc, #28]	; (80003a8 <SystemInit+0x28>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000394:	4b04      	ldr	r3, [pc, #16]	; (80003a8 <SystemInit+0x28>)
 8000396:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800039a:	609a      	str	r2, [r3, #8]
#endif
}
 800039c:	bf00      	nop
 800039e:	46bd      	mov	sp, r7
 80003a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003a4:	4770      	bx	lr
 80003a6:	bf00      	nop
 80003a8:	e000ed00 	.word	0xe000ed00

080003ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80003ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003e4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80003b0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80003b2:	e003      	b.n	80003bc <LoopCopyDataInit>

080003b4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80003b4:	4b0c      	ldr	r3, [pc, #48]	; (80003e8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80003b6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80003b8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80003ba:	3104      	adds	r1, #4

080003bc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80003bc:	480b      	ldr	r0, [pc, #44]	; (80003ec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80003c0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80003c2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80003c4:	d3f6      	bcc.n	80003b4 <CopyDataInit>
  ldr  r2, =_sbss
 80003c6:	4a0b      	ldr	r2, [pc, #44]	; (80003f4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80003c8:	e002      	b.n	80003d0 <LoopFillZerobss>

080003ca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80003ca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80003cc:	f842 3b04 	str.w	r3, [r2], #4

080003d0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80003d0:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80003d2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80003d4:	d3f9      	bcc.n	80003ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80003d6:	f7ff ffd3 	bl	8000380 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003da:	f000 f825 	bl	8000428 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003de:	f7ff ff11 	bl	8000204 <main>
  bx  lr    
 80003e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80003e4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80003e8:	08000490 	.word	0x08000490
  ldr  r0, =_sdata
 80003ec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80003f0:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 80003f4:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 80003f8:	20000024 	.word	0x20000024

080003fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80003fc:	e7fe      	b.n	80003fc <ADC_IRQHandler>
	...

08000400 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000404:	4b06      	ldr	r3, [pc, #24]	; (8000420 <HAL_IncTick+0x20>)
 8000406:	781b      	ldrb	r3, [r3, #0]
 8000408:	461a      	mov	r2, r3
 800040a:	4b06      	ldr	r3, [pc, #24]	; (8000424 <HAL_IncTick+0x24>)
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	4413      	add	r3, r2
 8000410:	4a04      	ldr	r2, [pc, #16]	; (8000424 <HAL_IncTick+0x24>)
 8000412:	6013      	str	r3, [r2, #0]
}
 8000414:	bf00      	nop
 8000416:	46bd      	mov	sp, r7
 8000418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041c:	4770      	bx	lr
 800041e:	bf00      	nop
 8000420:	20000000 	.word	0x20000000
 8000424:	20000020 	.word	0x20000020

08000428 <__libc_init_array>:
 8000428:	b570      	push	{r4, r5, r6, lr}
 800042a:	4e0d      	ldr	r6, [pc, #52]	; (8000460 <__libc_init_array+0x38>)
 800042c:	4c0d      	ldr	r4, [pc, #52]	; (8000464 <__libc_init_array+0x3c>)
 800042e:	1ba4      	subs	r4, r4, r6
 8000430:	10a4      	asrs	r4, r4, #2
 8000432:	2500      	movs	r5, #0
 8000434:	42a5      	cmp	r5, r4
 8000436:	d109      	bne.n	800044c <__libc_init_array+0x24>
 8000438:	4e0b      	ldr	r6, [pc, #44]	; (8000468 <__libc_init_array+0x40>)
 800043a:	4c0c      	ldr	r4, [pc, #48]	; (800046c <__libc_init_array+0x44>)
 800043c:	f000 f818 	bl	8000470 <_init>
 8000440:	1ba4      	subs	r4, r4, r6
 8000442:	10a4      	asrs	r4, r4, #2
 8000444:	2500      	movs	r5, #0
 8000446:	42a5      	cmp	r5, r4
 8000448:	d105      	bne.n	8000456 <__libc_init_array+0x2e>
 800044a:	bd70      	pop	{r4, r5, r6, pc}
 800044c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000450:	4798      	blx	r3
 8000452:	3501      	adds	r5, #1
 8000454:	e7ee      	b.n	8000434 <__libc_init_array+0xc>
 8000456:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800045a:	4798      	blx	r3
 800045c:	3501      	adds	r5, #1
 800045e:	e7f2      	b.n	8000446 <__libc_init_array+0x1e>
 8000460:	08000488 	.word	0x08000488
 8000464:	08000488 	.word	0x08000488
 8000468:	08000488 	.word	0x08000488
 800046c:	0800048c 	.word	0x0800048c

08000470 <_init>:
 8000470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000472:	bf00      	nop
 8000474:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000476:	bc08      	pop	{r3}
 8000478:	469e      	mov	lr, r3
 800047a:	4770      	bx	lr

0800047c <_fini>:
 800047c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800047e:	bf00      	nop
 8000480:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000482:	bc08      	pop	{r3}
 8000484:	469e      	mov	lr, r3
 8000486:	4770      	bx	lr
