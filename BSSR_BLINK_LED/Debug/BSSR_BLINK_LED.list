
BSSR_BLINK_LED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000210  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003d4  080003d4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003d4  080003d4  000103d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080003d8  080003d8  000103d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080003dc  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  080003e0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  080003e0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001581  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004d5  00000000  00000000  000215b5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000001c0  00000000  00000000  00021a90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000178  00000000  00000000  00021c50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001f507  00000000  00000000  00021dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00001d8b  00000000  00000000  000412cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c2319  00000000  00000000  0004305a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00105373  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000530  00000000  00000000  001053f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	080003bc 	.word	0x080003bc

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	080003bc 	.word	0x080003bc

08000204 <main>:
#include "stm32f4xx.h"

int main(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	RCC->AHB1ENR |=(1<<0);
 800020a:	4b16      	ldr	r3, [pc, #88]	; (8000264 <main+0x60>)
 800020c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800020e:	4a15      	ldr	r2, [pc, #84]	; (8000264 <main+0x60>)
 8000210:	f043 0301 	orr.w	r3, r3, #1
 8000214:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOA->MODER |=(1<<10);
 8000216:	4b14      	ldr	r3, [pc, #80]	; (8000268 <main+0x64>)
 8000218:	681b      	ldr	r3, [r3, #0]
 800021a:	4a13      	ldr	r2, [pc, #76]	; (8000268 <main+0x64>)
 800021c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000220:	6013      	str	r3, [r2, #0]
	while(1)
	{
		GPIOA->BSRR |=(1<<5);
 8000222:	4b11      	ldr	r3, [pc, #68]	; (8000268 <main+0x64>)
 8000224:	699b      	ldr	r3, [r3, #24]
 8000226:	4a10      	ldr	r2, [pc, #64]	; (8000268 <main+0x64>)
 8000228:	f043 0320 	orr.w	r3, r3, #32
 800022c:	6193      	str	r3, [r2, #24]
		for(int i =0;i<900000;i++){}
 800022e:	2300      	movs	r3, #0
 8000230:	607b      	str	r3, [r7, #4]
 8000232:	e002      	b.n	800023a <main+0x36>
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	3301      	adds	r3, #1
 8000238:	607b      	str	r3, [r7, #4]
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4a0b      	ldr	r2, [pc, #44]	; (800026c <main+0x68>)
 800023e:	4293      	cmp	r3, r2
 8000240:	ddf8      	ble.n	8000234 <main+0x30>
		GPIOA->BSRR |=(1<<21);
 8000242:	4b09      	ldr	r3, [pc, #36]	; (8000268 <main+0x64>)
 8000244:	699b      	ldr	r3, [r3, #24]
 8000246:	4a08      	ldr	r2, [pc, #32]	; (8000268 <main+0x64>)
 8000248:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800024c:	6193      	str	r3, [r2, #24]
		for(int i =0;i<900000;i++){}
 800024e:	2300      	movs	r3, #0
 8000250:	603b      	str	r3, [r7, #0]
 8000252:	e002      	b.n	800025a <main+0x56>
 8000254:	683b      	ldr	r3, [r7, #0]
 8000256:	3301      	adds	r3, #1
 8000258:	603b      	str	r3, [r7, #0]
 800025a:	683b      	ldr	r3, [r7, #0]
 800025c:	4a03      	ldr	r2, [pc, #12]	; (800026c <main+0x68>)
 800025e:	4293      	cmp	r3, r2
 8000260:	ddf8      	ble.n	8000254 <main+0x50>
		GPIOA->BSRR |=(1<<5);
 8000262:	e7de      	b.n	8000222 <main+0x1e>
 8000264:	40023800 	.word	0x40023800
 8000268:	40020000 	.word	0x40020000
 800026c:	000dbb9f 	.word	0x000dbb9f

08000270 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000270:	b480      	push	{r7}
 8000272:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000274:	bf00      	nop
 8000276:	46bd      	mov	sp, r7
 8000278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800027c:	4770      	bx	lr

0800027e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800027e:	b480      	push	{r7}
 8000280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000282:	e7fe      	b.n	8000282 <HardFault_Handler+0x4>

08000284 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000288:	e7fe      	b.n	8000288 <MemManage_Handler+0x4>

0800028a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800028a:	b480      	push	{r7}
 800028c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800028e:	e7fe      	b.n	800028e <BusFault_Handler+0x4>

08000290 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000290:	b480      	push	{r7}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000294:	e7fe      	b.n	8000294 <UsageFault_Handler+0x4>

08000296 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000296:	b480      	push	{r7}
 8000298:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800029a:	bf00      	nop
 800029c:	46bd      	mov	sp, r7
 800029e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a2:	4770      	bx	lr

080002a4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80002a4:	b480      	push	{r7}
 80002a6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80002a8:	bf00      	nop
 80002aa:	46bd      	mov	sp, r7
 80002ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b0:	4770      	bx	lr

080002b2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80002b2:	b480      	push	{r7}
 80002b4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80002b6:	bf00      	nop
 80002b8:	46bd      	mov	sp, r7
 80002ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002be:	4770      	bx	lr

080002c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80002c4:	f000 f842 	bl	800034c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80002c8:	bf00      	nop
 80002ca:	bd80      	pop	{r7, pc}

080002cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80002cc:	b480      	push	{r7}
 80002ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80002d0:	4b08      	ldr	r3, [pc, #32]	; (80002f4 <SystemInit+0x28>)
 80002d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002d6:	4a07      	ldr	r2, [pc, #28]	; (80002f4 <SystemInit+0x28>)
 80002d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <SystemInit+0x28>)
 80002e2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80002e6:	609a      	str	r2, [r3, #8]
#endif
}
 80002e8:	bf00      	nop
 80002ea:	46bd      	mov	sp, r7
 80002ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f0:	4770      	bx	lr
 80002f2:	bf00      	nop
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80002f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000330 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80002fc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80002fe:	e003      	b.n	8000308 <LoopCopyDataInit>

08000300 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000300:	4b0c      	ldr	r3, [pc, #48]	; (8000334 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000302:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000304:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000306:	3104      	adds	r1, #4

08000308 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000308:	480b      	ldr	r0, [pc, #44]	; (8000338 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800030a:	4b0c      	ldr	r3, [pc, #48]	; (800033c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 800030c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800030e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000310:	d3f6      	bcc.n	8000300 <CopyDataInit>
  ldr  r2, =_sbss
 8000312:	4a0b      	ldr	r2, [pc, #44]	; (8000340 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000314:	e002      	b.n	800031c <LoopFillZerobss>

08000316 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000316:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000318:	f842 3b04 	str.w	r3, [r2], #4

0800031c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 800031c:	4b09      	ldr	r3, [pc, #36]	; (8000344 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800031e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000320:	d3f9      	bcc.n	8000316 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000322:	f7ff ffd3 	bl	80002cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000326:	f000 f825 	bl	8000374 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800032a:	f7ff ff6b 	bl	8000204 <main>
  bx  lr    
 800032e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000330:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000334:	080003dc 	.word	0x080003dc
  ldr  r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 800033c:	20000004 	.word	0x20000004
  ldr  r2, =_sbss
 8000340:	20000004 	.word	0x20000004
  ldr  r3, = _ebss
 8000344:	20000024 	.word	0x20000024

08000348 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000348:	e7fe      	b.n	8000348 <ADC_IRQHandler>
	...

0800034c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000350:	4b06      	ldr	r3, [pc, #24]	; (800036c <HAL_IncTick+0x20>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	461a      	mov	r2, r3
 8000356:	4b06      	ldr	r3, [pc, #24]	; (8000370 <HAL_IncTick+0x24>)
 8000358:	681b      	ldr	r3, [r3, #0]
 800035a:	4413      	add	r3, r2
 800035c:	4a04      	ldr	r2, [pc, #16]	; (8000370 <HAL_IncTick+0x24>)
 800035e:	6013      	str	r3, [r2, #0]
}
 8000360:	bf00      	nop
 8000362:	46bd      	mov	sp, r7
 8000364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000368:	4770      	bx	lr
 800036a:	bf00      	nop
 800036c:	20000000 	.word	0x20000000
 8000370:	20000020 	.word	0x20000020

08000374 <__libc_init_array>:
 8000374:	b570      	push	{r4, r5, r6, lr}
 8000376:	4e0d      	ldr	r6, [pc, #52]	; (80003ac <__libc_init_array+0x38>)
 8000378:	4c0d      	ldr	r4, [pc, #52]	; (80003b0 <__libc_init_array+0x3c>)
 800037a:	1ba4      	subs	r4, r4, r6
 800037c:	10a4      	asrs	r4, r4, #2
 800037e:	2500      	movs	r5, #0
 8000380:	42a5      	cmp	r5, r4
 8000382:	d109      	bne.n	8000398 <__libc_init_array+0x24>
 8000384:	4e0b      	ldr	r6, [pc, #44]	; (80003b4 <__libc_init_array+0x40>)
 8000386:	4c0c      	ldr	r4, [pc, #48]	; (80003b8 <__libc_init_array+0x44>)
 8000388:	f000 f818 	bl	80003bc <_init>
 800038c:	1ba4      	subs	r4, r4, r6
 800038e:	10a4      	asrs	r4, r4, #2
 8000390:	2500      	movs	r5, #0
 8000392:	42a5      	cmp	r5, r4
 8000394:	d105      	bne.n	80003a2 <__libc_init_array+0x2e>
 8000396:	bd70      	pop	{r4, r5, r6, pc}
 8000398:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800039c:	4798      	blx	r3
 800039e:	3501      	adds	r5, #1
 80003a0:	e7ee      	b.n	8000380 <__libc_init_array+0xc>
 80003a2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80003a6:	4798      	blx	r3
 80003a8:	3501      	adds	r5, #1
 80003aa:	e7f2      	b.n	8000392 <__libc_init_array+0x1e>
 80003ac:	080003d4 	.word	0x080003d4
 80003b0:	080003d4 	.word	0x080003d4
 80003b4:	080003d4 	.word	0x080003d4
 80003b8:	080003d8 	.word	0x080003d8

080003bc <_init>:
 80003bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003be:	bf00      	nop
 80003c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003c2:	bc08      	pop	{r3}
 80003c4:	469e      	mov	lr, r3
 80003c6:	4770      	bx	lr

080003c8 <_fini>:
 80003c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ca:	bf00      	nop
 80003cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003ce:	bc08      	pop	{r3}
 80003d0:	469e      	mov	lr, r3
 80003d2:	4770      	bx	lr
